# http://www.lighttpd.net/documentation/configuration.html
# lighttpd configuration file

server.modules = ( "mod_cgi",
	   	   "mod_auth",
                   "mod_rewrite", 
                   "mod_redirect",
                   "mod_setenv"
                 )

## a static document-root, for virtual-hosting take look at the 
## server.virtual-* options
server.document-root = "/www/"

include "/etc/lighttpd/*.conf"

## where to send error-messages to
server.errorlog = "/var/log/lighttpd.error.log"

url.rewrite-once = ( "^/$" => "index.html" )
index-file.names = ("index.cgi", "index.html" )

## mimetype mapping
mimetype.assign = (  
	".pdf"   => "application/pdf",
	".class" => "application/octet-stream",
	".pac"   => "application/x-ns-proxy-autoconfig",
	".swf"   => "application/x-shockwave-flash",
	".json"  => "application/json",
	".wav"   => "audio/x-wav",
	".gif"   => "image/gif",
	".jpg"   => "image/jpeg",
	".jpeg"  => "image/jpeg",
	".png"   => "image/png",
	".css"   => "text/css",
	".html"  => "text/html",
	".htm"   => "text/html",
	".js"    => "text/javascript",
	".txt"   => "text/plain",
	".dtd"   => "text/xml",
	".xml"   => "text/xml",
	".ts"    => "video/mp2t",
	".m3u8"  => "application/vnd.apple.mpegurl",
	".mp4"   => "video/mp4",
	""       => "application/octet-stream"
 )

# which extensions should not be handle via static-file transfer
#
# .php, .pl, .fcgi are most often handled by mod_fastcgi or mod_cgi
static-file.exclude-extensions = (".cgi", ".fcgi", ".xml", ".json")

## error-handler for status 404
server.error-handler-404 = "error-404.html"

## to help the rc.scripts
server.pid-file = "/var/run/lighttpd.pid"

## Format: <errorfile-prefix><status>.html
## -> ..../status-404.html for 'File not found'
server.errorfile-prefix = "/www/error-"

server.modules += ("mod_fastcgi")
fastcgi.server = ( 
 "/slow_stats" => 
  ( "localhost" =>
    (
      "socket"     => "/tmp/slow_fcgi_sock",
      "check-local" => "disable"
    )
  ), 
 ".cgi" => 
  ( "localhost" =>
    (
      "socket"     => "/tmp/fcgi_sock",
      "check-local" => "disable"
    )
  ), 
)
fastcgi.map-extensions = ( ".xml" => ".cgi", ".json" => ".cgi" )

#### CGI module
cgi.assign = (
	".sh" => "/bin/sh"
	)

#### auth module
## read authentification.txt for more info
auth.backend = "htdigest"
auth.backend.htdigest.userfile = "/tmp/lighttpd-htdigest.user"

auth.require = (
	"/configure" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	),
	"/configure/swports_adjust.cgi" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	),
	"/link_neg.cgi" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	),
	"/switch_ports.cgi" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	),
	"/switch_ports_json.cgi" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	),
	"/wired_ports_json.cgi" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	),
	"/node_config.json" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	),
	"/set_new_config.cgi" => (
		"method"  => "digest",
		"realm"   => "__REALM_TEXT__",
		"require" => "valid-user"
	)
)

setenv.add-response-header = ( "X-Frame-Options" => "deny" )

$HTTP["url"] =~ "\.(m3u8).*$" {
  setenv.add-response-header += ( "Cache-Control" => "no-store, no-cache, must-revalidate, post-check=0, pre-check=0" )
  setenv.add-response-header += ( "Access-Control-Allow-Origin" => "*" )
  setenv.add-response-header += ( "X-Frame-Options" => "ALLOWALL" )
}

$HTTP["url"] =~ "\.(ts).*$" {
  setenv.add-response-header += ( "Cache-Control" => "max-age=30" )
  setenv.add-response-header += ( "Access-Control-Allow-Origin" => "*" )
  setenv.add-response-header += ( "X-Frame-Options" => "ALLOWALL" )
}

$HTTP["url"] =~ "\.(mp4).*$" {
  setenv.add-response-header += ( "Cache-Control" => "max-age=30" )
  setenv.add-response-header += ( "Access-Control-Allow-Origin" => "*" )
  setenv.add-response-header += ( "X-Frame-Options" => "ALLOWALL" )
}

$HTTP["url"] =~ "\.(html|css|js)$" {
  setenv.add-response-header += ( "Cache-Control" => "no-store, no-cache, must-revalidate, post-check=0, pre-check=0" )
  etag.use-inode = "disable",
  etag.use-mtime = "disable",
  etag.use-size = "disable",
}

static-file.etags = "disable"

#maximum size in kbytes of the request (header + body)
server.max-request-size = __MAX_REQUEST_SIZE__
